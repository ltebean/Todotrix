// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generateted, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Raleway-Regular.ttf`.
    static let ralewayRegularTtf = FileResource(bundle: _R.hostingBundle, name: "Raleway-Regular", pathExtension: "ttf")
    
    /// `bundle.URLForResource("Raleway-Regular", withExtension: "ttf")`
    static func ralewayRegularTtf(_: Void) -> NSURL? {
      let fileResource = R.file.ralewayRegularTtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font {
    /// Font `Raleway-Regular`.
    static let ralewayRegular = FontResource(fontName: "Raleway-Regular")
    
    /// `UIFont(name: "Raleway-Regular", size: ...)`
    static func ralewayRegular(size size: CGFloat) -> UIFont? {
      return UIFont(resource: ralewayRegular, size: size)
    }
    
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `TodoAreaView`.
    static let todoAreaView = _R.nib._TodoAreaView()
    
    /// `UINib(name: "TodoAreaView", bundle: ...)`
    static func todoAreaView(_: Void) -> UINib {
      return UINib(resource: R.nib.todoAreaView)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `cell`.
    static let cell: ReuseIdentifier<TodoCell> = ReuseIdentifier(identifier: "cell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let hostingBundle = NSBundle(identifier: "io.ltebean.todo") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _TodoAreaView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "TodoAreaView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try home.validate()
    }
    
    struct home: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationController
      
      let bundle = _R.hostingBundle
      let home = StoryboardViewControllerResource<HomeViewController>(identifier: "home")
      let input = StoryboardViewControllerResource<TodoInputViewController>(identifier: "input")
      let list = StoryboardViewControllerResource<TodoListViewController>(identifier: "list")
      let name = "Home"
      let settings = StoryboardViewControllerResource<NavigationController>(identifier: "settings")
      
      func home(_: Void) -> HomeViewController? {
        return UIStoryboard(resource: self).instantiateViewController(home)
      }
      
      func input(_: Void) -> TodoInputViewController? {
        return UIStoryboard(resource: self).instantiateViewController(input)
      }
      
      func list(_: Void) -> TodoListViewController? {
        return UIStoryboard(resource: self).instantiateViewController(list)
      }
      
      func settings(_: Void) -> NavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(settings)
      }
      
      static func validate() throws {
        if _R.storyboard.home().home() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'home' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
        if _R.storyboard.home().input() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'input' could not be loaded from storyboard 'Home' as 'TodoInputViewController'.") }
        if _R.storyboard.home().list() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'list' could not be loaded from storyboard 'Home' as 'TodoListViewController'.") }
        if _R.storyboard.home().settings() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'settings' could not be loaded from storyboard 'Home' as 'NavigationController'.") }
      }
      
      private init() {}
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}